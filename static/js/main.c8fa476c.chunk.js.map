{"version":3,"sources":["image/profile_picture.jpg","component/Navbar/Navbar.js","component/Skillbar/Skillbar.js","container/About/About.js","container/Home/Home.js","container/Project/Project.js","container/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","currentClassName","items","offset","onClick","gotoHome","gotoAbout","gotoProject","gotoContact","Skillbar","skills","map","skill","index","isCollapsed","key","name","style","width","value","backgroundColor","About","aboutDiv","createRef","useState","setCollapsed","handleScroll","current","getBoundingClientRect","top","window","scrollY","useEffect","addEventListener","removeEventListener","ref","src","ProfPic","alt","color","cursor","Home","Project","Contact","App","homeSection","aboutSection","projectSection","contactSection","scrollToRef","scrollToComponent","align","duration","ease","id","Boolean","location","hostname","match","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8fa476c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_picture.9db0cc54.jpg\";","import React from \"react\";\r\nimport Scrollspy from 'react-scrollspy'\r\n\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Scrollspy\r\n        className=\"navbar-item-list\"\r\n        currentClassName=\"current\"\r\n        items={[\"home\", \"about\", \"project\", \"contact\"]}\r\n        offset={-30}\r\n      >\r\n        <li className=\"navbar-item\" onClick={props.gotoHome}>HOME</li>\r\n        <li className=\"navbar-item\" onClick={props.gotoAbout}>ABOUT</li>\r\n        <li className=\"navbar-item\" onClick={props.gotoProject}>PROJECT</li>\r\n        <li className=\"navbar-item\" onClick={props.gotoContact}>CONTACT</li>\r\n      </Scrollspy>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nimport \"./Skillbar.css\";\r\n\r\nconst Skillbar = props => {\r\n  return (\r\n    <div className=\"skillbar\">\r\n      <ul className=\"skillbar-item-list\">\r\n        {props.skills.map((skill, index) => (\r\n          <li>\r\n            <div\r\n              className={`skillbar-item ${\r\n                props.isCollapsed ? \"collapsed\" : \"\"\r\n              }`}\r\n              key={skill.name}\r\n              style={{\r\n                width: `${skill.value}%`,\r\n                backgroundColor: `hsl(190, 90%, ${100 / (index + 2.5)}%)`\r\n              }}\r\n            >\r\n              <div className=\"skillbar-item-name\">{skill.name}</div>\r\n              <div className=\"skillbar-item-value\">{skill.value}</div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skillbar;\r\n","import React, { createRef, useEffect, useState } from \"react\";\r\n\r\nimport \"./About.css\";\r\nimport { Skillbar } from \"../../component/Skillbar\";\r\nimport ProfPic from \"../../image/profile_picture.jpg\";\r\n\r\nconst About = props => {\r\n  // Skill section logic\r\n  const skills = [\r\n    { name: \"Python\", value: 90 },\r\n    { name: \"C++\", value: 80 },\r\n    { name: \"C#\", value: 80 },\r\n    { name: \"Java\", value: 75 },\r\n    { name: \"HTML\", value: 90 },\r\n    { name: \"CSS\", value: 90 },\r\n    { name: \"JavaScript\", value: 80 },\r\n    { name: \"React.js\", value: 75 },\r\n    { name: \"Node.js\", value: 70 },\r\n    { name: \"CorelDraw\", value: 70 },\r\n    { name: \"Git\", value: 90 }\r\n  ];\r\n  const aboutDiv = createRef();\r\n  const [isCollapsed, setCollapsed] = useState(false);\r\n\r\n  const handleScroll = () => {\r\n    if (aboutDiv.current === null) return;\r\n    if (aboutDiv.current.getBoundingClientRect().top <= 50) {\r\n      setCollapsed(false);\r\n    } else if (window.scrollY === 0) {\r\n      setCollapsed(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", () => handleScroll);\r\n    };\r\n  }, [handleScroll]);\r\n\r\n  return (\r\n    <div className=\"about\" ref={aboutDiv}>\r\n      <div className=\"about-title\">\r\n        <h2>ABOUT</h2>\r\n      </div>\r\n      <div className=\"about-content\">\r\n        <div className=\"about-content-left\">\r\n          <div className=\"profile-pic\">\r\n            <img src={ProfPic} alt=\"Potrait\" />\r\n          </div>\r\n          <div className=\"profile-desc\">\r\n            <h2>Who am I?</h2>\r\n            <p>\r\n              My name is Naufal Dean Anugrah. I'm a second-year student in\r\n              Informatics Engineering at Institut Teknologi Bandung.\r\n              <br />\r\n              <br />\r\n              I'm participated in some clubs and organizations, such as HMIF\r\n              (Himpunan Mahasiswa Informatika), URO (Unit Robotika), and ARC\r\n              (Amateur Radio Club).\r\n              <br />\r\n              Furthermore, I'm active in learning and participating in CTF\r\n              (Capture the Flag) competition.\r\n              <br />\r\n              <br />\r\n              <span\r\n                onClick={props.gotoContact}\r\n                style={{ color: `#00838f`, cursor: `pointer` }}\r\n              >\r\n                Let's create something awesome!\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"about-content-right\">\r\n          <Skillbar skills={skills} isCollapsed={isCollapsed} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nimport \"./Home.css\";\r\n\r\nconst Home = props => {\r\n  return (\r\n    <div className=\"home\">\r\n      <span>\r\n        <h2>\r\n          Hello World, I'm <span style={{ color: \"#102027\" }}>Dean</span>!\r\n        </h2>\r\n        <h3>I'm a student at Informatics Engineering ITB</h3>\r\n        <h3>And I love creating something awesome</h3>\r\n        <button onClick={props.gotoAbout}>About me</button>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nimport \"./Project.css\";\r\n\r\nconst Project = props => {\r\n  return (\r\n    <div className=\"project\">\r\n      <div className=\"project-title\">\r\n        <h2>PROJECT</h2>\r\n      </div>\r\n      <div className=\"project-content\">\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n","import React from \"react\";\r\n\r\nimport \"./Contact.css\";\r\n\r\nconst Contact = props => {\r\n  return (\r\n    <div className=\"contact\">\r\n      <div className=\"contact-title\">\r\n        <h2>CONTACT</h2>\r\n      </div>\r\n      <div className=\"contact-content\">\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, { createRef } from \"react\";\nimport scrollToComponent from \"react-scroll-to-component\";\n\nimport \"./App.css\";\nimport { Navbar } from \"./component/Navbar\";\nimport { About } from \"./container/About\";\nimport { Home } from \"./container/Home\";\nimport { Project } from \"./container/Project\";\nimport { Contact } from \"./container/Contact\";\n\nconst App = () => {\n  const homeSection = createRef();\n  const aboutSection = createRef();\n  const projectSection = createRef();\n  const contactSection = createRef();\n\n  const scrollToRef = ref => {\n    scrollToComponent(ref.current, {\n      offset: -25,\n      align: \"middle\",\n      duration: 1000,\n      ease: \"inOutCube\"\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <section id=\"home\" ref={homeSection}>\n        <Home gotoAbout={() => scrollToRef(aboutSection)} />\n      </section>\n      <section id=\"navbar\">\n        <Navbar\n          gotoHome={() => scrollToRef(homeSection)}\n          gotoAbout={() => scrollToRef(aboutSection)}\n          gotoProject={() => scrollToRef(projectSection)}\n          gotoContact={() => scrollToRef(contactSection)}\n        />\n      </section>\n      <section id=\"about\" ref={aboutSection}>\n        <About gotoContact={() => scrollToRef(contactSection)} />\n      </section>\n      <section id=\"project\" ref={projectSection}>\n        <Project />\n      </section>\n      <section id=\"contact\" ref={contactSection}>\n        <Contact />\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}