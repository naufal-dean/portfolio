{"version":3,"sources":["component/Navbar/Navbar.js","container/About/About.js","container/Home/Home.js","container/Project/Project.js","container/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","onClick","gotoHome","gotoAbout","gotoProject","gotoContact","About","forwardRef","ref","style","height","Home","color","Project","Contact","App","homeSection","createRef","aboutSection","projectSection","contactSection","scrollToRef","console","log","scrollToComponent","current","offset","align","duration","ease","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iWAyBeA,G,YArBA,SAAAC,GACb,OACE,yBAAKC,UAAU,UACb,4BACE,4BACE,uBAAGC,KAAK,IAAIC,QAASH,EAAMI,UAA3B,SAEF,4BACE,uBAAGF,KAAK,IAAIC,QAASH,EAAMK,WAA3B,UAEF,4BACE,uBAAGH,KAAK,IAAIC,QAASH,EAAMM,aAA3B,YAEF,4BACE,uBAAGJ,KAAK,IAAIC,QAASH,EAAMO,aAA3B,gBCLKC,G,MATDC,sBAAW,SAACT,EAAOU,GAC/B,OACE,yBAAKT,UAAU,QAAQS,IAAKA,GAC1B,yBAAKC,MAAO,CAACC,OAAQ,QACrB,0CCWSC,G,MAfFJ,sBAAW,SAACT,EAAOU,GAC9B,OACE,yBAAKT,UAAU,OAAOS,IAAKA,GACzB,8BACE,gDACmB,0BAAMC,MAAO,CAAEG,MAAO,YAAtB,QADnB,KAGA,4EACA,qEACA,4BAAQX,QAASH,EAAMK,WAAvB,kBCDOU,G,MARCN,sBAAW,SAACT,EAAOU,GACjC,OACE,yBAAKT,UAAU,UAAUS,IAAKA,GAC5B,4CCKSM,G,MARCP,sBAAW,SAACT,EAAOU,GACjC,OACE,yBAAKT,UAAU,UAAUS,IAAKA,GAC5B,4CCmCSO,EAhCH,WACV,IAAMC,EAAcC,sBACdC,EAAeD,sBACfE,EAAiBF,sBACjBG,EAAiBH,sBAEjBI,EAAc,SAAAb,GAClBc,QAAQC,IAAIf,GACZgB,IAAkBhB,EAAIiB,QAAS,CAC7BC,OAAQ,EACRC,MAAO,SACPC,SAAU,IACVC,KAAM,eAIV,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,CAAMS,IAAKQ,EAAab,UAAW,kBAAMkB,EAAYH,MACrD,kBAAC,EAAD,CACEhB,SAAU,kBAAMmB,EAAYL,IAC5Bb,UAAW,kBAAMkB,EAAYH,IAC7Bd,YAAa,kBAAMiB,EAAYF,IAC/Bd,YAAa,kBAAMgB,EAAYD,MAEjC,kBAAC,EAAD,CAAOZ,IAAKU,IACZ,kBAAC,EAAD,CAASV,IAAKW,IACd,kBAAC,EAAD,CAASX,IAAKY,MCzBAU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,cAChB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.4ca69fb0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li>\r\n          <a href=\"#\" onClick={props.gotoHome}>HOME</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\" onClick={props.gotoAbout}>ABOUT</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\" onClick={props.gotoProject}>PROJECT</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\" onClick={props.gotoContact}>CONTACT</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { forwardRef } from \"react\";\r\n\r\nimport \"./About.css\";\r\n\r\nconst About = forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"about\" ref={ref}>\r\n      <div style={{height: \"50\"}}></div>\r\n      <h2>About</h2>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default About;\r\n","import React, { forwardRef } from \"react\";\r\n\r\nimport \"./Home.css\";\r\n\r\nconst Home = forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"home\" ref={ref}>\r\n      <span>\r\n        <h2>\r\n          Hello World, I'm <span style={{ color: \"#102027\" }}>Dean</span>!\r\n        </h2>\r\n        <h3>I'm a student at Informatics Engineering ITB</h3>\r\n        <h3>And I love creating something awesome</h3>\r\n        <button onClick={props.gotoAbout}>About me</button>\r\n      </span>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Home;\r\n","import React, { forwardRef } from \"react\";\r\n\r\nimport \"./Project.css\";\r\n\r\nconst Project = forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"project\" ref={ref}>\r\n      <h2>Project</h2>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Project;\r\n","import React, { forwardRef } from \"react\";\r\n\r\nimport \"./Contact.css\";\r\n\r\nconst Contact = forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"contact\" ref={ref}>\r\n      <h2>Contact</h2>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Contact;\r\n","import React, { createRef } from \"react\";\nimport scrollToComponent from \"react-scroll-to-component\";\n\nimport \"./App.css\";\nimport { Navbar } from \"./component/Navbar\";\nimport { About } from \"./container/About\";\nimport { Home } from \"./container/Home\";\nimport { Project } from \"./container/Project\";\nimport { Contact } from \"./container/Contact\";\n\nconst App = () => {\n  const homeSection = createRef();\n  const aboutSection = createRef();\n  const projectSection = createRef();\n  const contactSection = createRef();\n\n  const scrollToRef = ref => {\n    console.log(ref);\n    scrollToComponent(ref.current, {\n      offset: 0,\n      align: \"middle\",\n      duration: 1000,\n      ease: \"inOutCube\"\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <Home ref={homeSection} gotoAbout={() => scrollToRef(aboutSection)} />\n      <Navbar\n        gotoHome={() => scrollToRef(homeSection)}\n        gotoAbout={() => scrollToRef(aboutSection)}\n        gotoProject={() => scrollToRef(projectSection)}\n        gotoContact={() => scrollToRef(contactSection)}\n      />\n      <About ref={aboutSection} />\n      <Project ref={projectSection} />\n      <Contact ref={contactSection} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}